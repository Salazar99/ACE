// /////////////////////////////////////////////////////////////////////////
// C++ code automatically generated by hif2sc
// Part of HIFSuite - Version 
// Site: www.hifsuite.com - Contact: hifsuite@edalab.it
//
// HIFSuite copyright: EDALab s.r.l. - Networked Embedded Systems
// Site: www.edalab.it - Contact: info@edalab.it
// /////////////////////////////////////////////////////////////////////////


#ifndef MUTEX_HH
#define MUTEX_HH

#include <cmath>
#include <cstddef>
#include <stdint.h>
#include "hif_globals.hpp"
#include "muffin/FaultNode.hpp"
#include "muffin/muffin_dataTypes.hpp"

class mutex
{

public:

    muffin::FaultNode hif_fault_node;
    uint16_t in_old;
    bool clk_old;
    struct mutex_iostruct{
        bool clk;
        uint16_t in;
        bool positive_flag;
        bool negative_flag;

        mutex_iostruct():
            clk(false),
            in(uint16_t(0U)),
            positive_flag(false),
            negative_flag(false)
        {}

        mutex_iostruct( const bool clk_0, const uint16_t in_0, const bool positive_flag_0,
             const bool negative_flag_0 ):
            clk(clk_0),
            in(in_0),
            positive_flag(positive_flag_0),
            negative_flag(negative_flag_0)
        {}

        ~mutex_iostruct()
        {}

        bool operator == (const mutex_iostruct & other) const
        {
            if (clk != other.clk) return false;
            if (in != other.in) return false;
            if (positive_flag != other.positive_flag) return false;
            if (negative_flag != other.negative_flag) return false;
            return true;
        }
    };
    mutex_iostruct hif_a2t_data;
    mutex();


    ~mutex();


    bool process_in_queue;
    bool flag_pos_clk;

    void process();


    void update_input_queue( bool synch_phase = true );


    void update_event_queue();


    void flag_elaboration();


    void synch_elaboration();


    void simulate( mutex_iostruct * io_exchange, int32_t & cycles_number );


    void start_of_simulation();


    void initialize();


    void finalize();


private:

    mutex( const mutex & );
    const mutex& operator= ( const mutex & );


};


#endif

